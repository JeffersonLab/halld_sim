#
#
# $Header$
#

#
# This is a generic makefile used to build all the source in the
# current directory (anything with a .c, .cc, .cxx, .cpp or .F 
# suffix) into a library. This file is actually included by another
# file which implements the actual rule. The idea is that a given
# directory will contain source that represents a library,
# in which case Makefile.lib is included, or an executable,
# in which case Makefile.bin is included.
# 

.PHONY: mkdirs clean env all first

# The first target is made by default when make is invoked with no
# arguments. We want to include other targets here (namely, depends
# files) so we need to make a dummy target appear first that calls
# the real default target which resides in either Makefile.bin or
# Makefile.lib
first: all

ifndef OS
OS = $(shell uname)
endif
ifndef ARCH
ARCH = $(shell uname -p)
endif
ifndef BMS_OSNAME
BMS_OSNAME = $(shell $(HALLD_SIM_HOME)/src/BMS/osrelease.pl)
endif

# Default GNU fortran compiler is based
# on whether we're using gcc3 or not
GCCVERSION = $(shell $(HALLD_SIM_HOME)/src/BMS/gcc_version.csh majoronly)
ifeq ($(strip $(GCCVERSION)), 3)
	# Using gcc3
	FC_GNU = g77
else
	# Using gcc4
	FC_GNU = gfortran
endif

# FC is now set to f77 by default so simply checking if it's not defined always fails
ifeq ($(FC), f77)
FC		= $(FC_GNU)
endif
ifndef CC
CC		= gcc
endif
ifndef CXX
CXX	= g++
endif

# Only the GNU compiler seems to support the -MM option right now.
# hence, we define separate compilers for creating the gmake rules
ifndef DFC
DFC		= $(FC_GNU)
endif
ifndef DCC
DCC		= gcc
endif
ifndef DCXX
DCXX	= g++
endif

LIB_DIR		= .lib/$(BMS_OSNAME)
BIN_DIR		= .bin/$(BMS_OSNAME)
DEP_DIR		= .depends/$(BMS_OSNAME)
# The following gets overwritten with HALLD_MY below
INSTALL_DIR = $(HALLD_SIM_HOME)

# include working directory and parent directory first
FFLAGS   += -I. -I.. -I../include
CFLAGS   += -I. -I.. -I../include
CXXFLAGS += -I. -I.. -I../include

# include HALLD_MY include directory (if HALLD_MY) is defined
ifdef HALLD_MY
FFLAGS   += -I$(HALLD_MY)/include
CFLAGS   += -I$(HALLD_MY)/include
CXXFLAGS += -I$(HALLD_MY)/include
INSTALL_DIR = $(HALLD_MY)
endif

# include HALLD_SIM_HOME include directory
FFLAGS   += -I$(HALLD_SIM_HOME)/include
CFLAGS   += -I$(HALLD_SIM_HOME)/include
CXXFLAGS += -I$(HALLD_SIM_HOME)/include

# include HALLD_SIM_HOME/$(BMS_OSNAME) include directory
FFLAGS   += -I$(HALLD_SIM_HOME)/$(BMS_OSNAME)/include
CFLAGS   += -I$(HALLD_SIM_HOME)/$(BMS_OSNAME)/include
CXXFLAGS += -I$(HALLD_SIM_HOME)/$(BMS_OSNAME)/include

# This is to allow files of size>2GB (specifically for HDDM) 6/19/2009 DL
CXXFLAGS += -D_FILE_OFFSET_BITS=64
CFLAGS += -D_FILE_OFFSET_BITS=64

# Include user specified package makefiles
PACKAGE_MAKEFILES = $(foreach name,$(subst :, ,$(PACKAGES)),$(HALLD_SIM_HOME)/src/BMS/Makefile.$(name))

ifdef PACKAGES
include $(PACKAGE_MAKEFILES)
endif

FSRC		+= $(wildcard *.F)
CSRC		+= $(wildcard *.c)
CXXSRC	+= $(wildcard *.cc *.cpp *.cxx)


# Note: we use sort here just to remove duplicates
OBJS	+= $(NO_DEP_OBJS)
OBJS  += $(sort $(addsuffix .o,$(basename $(FSRC) $(CSRC) $(CXXSRC))))
ODEPS = $(filter-out $(NO_DEP_OBJS),$(OBJS))
DEPS	+= $(ODEPS:.o=.d)

# If DEBUG mode is requested, add "_d" suffix and turn on
# debugging symbols
ifdef DEBUG
	DEBUG_SUFFIX = _d
	FFLAGS   += -g
	CFLAGS	+= -g
	CXXFLAGS	+= -g

	# Default optimization level for debug mode is 0.
	# User can override with "make OPTIMIZE=X" (see below)
	ifndef OPTIMIZE
		OPTIMIZE := 0
	endif

endif

# If PROFILE mode is requested, add "_d" suffix and turn on
# profiling as well as debug symbols
ifdef PROFILE
	DEBUG_SUFFIX = _d
	FFLAGS   += -g -pg
	CFLAGS	+= -g -pg
	CXXFLAGS	+= -g -pg
	LD_FLAGS	+= -g -pg
endif

# Set default optimization level to 2, but allow OPTIMIZE=X
# command line option to set it to something else
ifndef OPTIMIZE
	OPTIMIZE := 2
endif

#	Do NOT turn on optimization in FFLAGS. Compilation will fail on hddsGeant3.F
CFLAGS	+= -O$(OPTIMIZE)
CXXFLAGS	+= -O$(OPTIMIZE)


ifndef MODULE_NAME
 MODULE_NAME = $(shell basename $(shell pwd))
endif
LIBNAME = $(LIB_DIR)/lib$(MODULE_NAME)$(DEBUG_SUFFIX).a

# Include platform specific definitions
# (the "-" at the front means don't error if the file doesn't exist)
-include $(HALLD_SIM_HOME)/src/BMS/Makefile.$(OS)
-include $(HALLD_SIM_HOME)/src/BMS/Makefile.$(ARCH)
-include $(HALLD_SIM_HOME)/src/BMS/Makefile.$(BMS_OSNAME)

# For GNU compilers, add verbose warnings
ifeq ($(FC),$(FC_GNU))
  FFLAGS   += -Wall -std=legacy
endif
ifeq ($(CC),gcc)
  CFLAGS   += -Wall -DgFortran
endif
ifeq ($(CXX),g++)
  CXXFLAGS += -Wall
endif

# Include all dependancy files
ifneq ($(strip $(DEPS)),)
-include $(foreach s,$(DEPS),$(DEP_DIR)/$s)
endif

# Filter out any user-specified compile flags to filter
# (this allows one to turn off -Wall for example)
FFLAGS := $(filter-out $(FFLAGS_FILTER_OUT), $(FFLAGS))
CFLAGS := $(filter-out $(CFLAGS_FILTER_OUT), $(CFLAGS))
CXXFLAGS := $(filter-out $(CXXFLAGS_FILTER_OUT), $(CXXFLAGS))

include $(HALLD_SIM_HOME)/src/BMS/Makefile.SIMD
